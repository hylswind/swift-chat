apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '..'
    // root = file("../")
    //   The folder where the react-native NPM package is. Default is ../node_modules/react-native
    // reactNativeDir = file("../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../node_modules/@react-native/codegen
    // codegenDir = file("../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../node_modules/react-native/cli.js
    // cliFile = file("../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = true

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace "com.aws.swiftchat"
    defaultConfig {
        applicationId "com.aws.swiftchat"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 63
        versionName "2.5.0"
        ndk {
            //noinspection ChromeOsAbiSupport
            abiFilters 'arm64-v8a'
        }
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def outputFile = output.outputFile
                    if (outputFile != null && outputFile.name.endsWith('.apk')) {
                        def fileName = "SugarApple.apk"
                        output.outputFileName = fileName
                    }
                }
            }
        }
    }

    packaging {
        resources {
            resources.pickFirsts.add('com/facebook/react/modules/network/ProgressiveStringDecoder.class')
        }
    }

    // delete the duplicate class before R8 (only for release builds)
    applicationVariants.all { variant ->
        // only run during release
        if (variant.name.contains('release')) {
            def r8Task = tasks.findByName("minify${variant.name.capitalize()}WithR8")
            if (r8Task) {
                r8Task.doFirst {
                    // Search and handle all react-android related JAR file
                    def processedJars = []

                    // Search Gradle Cached JAR file - support multiple env
                    def gradleCachePaths = [
                        file("${System.getProperty('user.home')}/.gradle/caches"),
                        file("${gradle.gradleUserHomeDir}/caches"),
                        file("${System.getProperty('GRADLE_USER_HOME', System.getProperty('user.home') + '/.gradle')}/caches")
                    ]

                    def gradleCache = gradleCachePaths.find { it.exists() }
                    if (gradleCache) {
                        println "Using Gradle cache directory: ${gradleCache.absolutePath}"
                        gradleCache.eachFileRecurse { file ->
                            if (file.name.contains('react-android') && file.name.endsWith('.jar')) {
                                def tmpDir = new File("${buildDir}/tmp/modifiedReactAndroid_${file.name}/")
                                def backupFile = new File("${buildDir}/tmp/backup_${file.name}")

                                tmpDir.deleteDir()
                                tmpDir.mkdirs()
                                backupFile.parentFile.mkdirs()

                                println "Processing cached react-android JAR: ${file.absolutePath}"

                                try {
                                    // backup JAR file
                                    copy {
                                        from file
                                        into backupFile.parent
                                        rename { backupFile.name }
                                    }
                                    if (!project.ext.has('backupMap')) {
                                        project.ext.backupMap = [:]
                                    }
                                    project.ext.backupMap[file.absolutePath] = backupFile.absolutePath
                                    println "Backed up ${file.name} to ${backupFile.absolutePath}"

                                    // unzip JAR
                                    copy {
                                        from zipTree(file)
                                        into tmpDir
                                    }

                                    // Delete duplicated class file
                                    def conflictClass = new File("${tmpDir}/com/facebook/react/modules/network/ProgressiveStringDecoder.class")
                                    if (conflictClass.exists()) {
                                        conflictClass.delete()
                                        println "Removed conflicting ProgressiveStringDecoder.class from ${file.name}"

                                        // RePackage JAR
                                        ant.jar(destfile: file) {
                                            fileset(dir: tmpDir)
                                        }

                                        processedJars.add(file.name)
                                    }
                                } catch (Exception e) {
                                    println "Warning: Could not process ${file.name}: ${e.message}"
                                }
                            }
                        }
                    } else {
                        println "No Gradle cache directory found in any of the expected locations"
                    }

                    if (processedJars.size() > 0) {
                        println "Successfully processed ${processedJars.size()} react-android JAR files: ${processedJars}"
                    } else {
                        println "No react-android JAR files found to process"
                    }
                }

                // revert the changes
                r8Task.doLast {
                    def backupMap = project.ext.has('backupMap') ? project.ext.backupMap : [:]
                    backupMap.each { originalPath, backupPath ->
                        try {
                            def originalFile = new File(originalPath)
                            def backupFile = new File(backupPath)

                            if (backupFile.exists()) {
                                copy {
                                    from backupFile
                                    into originalFile.parent
                                    rename { originalFile.name }
                                }
                                backupFile.delete()
                                println "Restored ${originalFile.name} from backup"
                            }
                        } catch (Exception e) {
                            println "Warning: Could not restore ${originalPath}: ${e.message}"
                        }
                    }

                    if (backupMap.size() > 0) {
                        println "Successfully restored ${backupMap.size()} JAR files from backup"
                        if (project.ext.has('backupMap')) {
                            project.ext.backupMap = [:]
                        }
                    }
                }
            }
        }
    }
}

dependencies {
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")
    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
